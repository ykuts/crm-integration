// Prisma Schema for CRM Integration Database
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("CRM_DATABASE_URL")
}

// Bot Orders Table - stores orders from chat bots
model BotOrder {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Bot order identification
  botOrderId String @unique // Unique ID from bot system
  source     String         // telegram, whatsapp, messenger, etc.
  chatId     String         // Chat/conversation ID

  // Customer information
  customerPhone String
  customerName  String
  customerEmail String?

  // Order details
  products     String // JSON string of products array
  deliveryInfo String // JSON string of delivery information
  paymentMethod String
  totalAmount  Float
  
  // Order status and tracking
  status String @default("PENDING") // PENDING, CONFIRMED, PREPARING, READY, DELIVERED, CANCELLED, REFUNDED
  notes  String?

  // SendPulse integration
  sendpulseDealId    String?
  sendpulseContactId String?

  // Additional metadata
  metadata String @default("{}") // JSON string for additional data

  @@map("bot_orders")
  @@index([botOrderId])
  @@index([source])
  @@index([customerPhone])
  @@index([status])
  @@index([createdAt])
}

// Product Mapping Table - maps ecommerce products to SendPulse products
model ProductMapping {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Mapping information
  ecommerceId  Int    @unique // ID from ecommerce database
  sendpulseId  Int             // ID in SendPulse CRM
  name         String          // Product name for reference
  
  // Optional sync information
  lastSyncAt   DateTime?
  syncStatus   String @default("ACTIVE") // ACTIVE, INACTIVE, ERROR

  @@map("product_mappings")
  @@index([ecommerceId])
  @@index([sendpulseId])
}

// Customer Mapping Table - maps ecommerce customers to SendPulse contacts
model CustomerMapping {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Customer identification
  ecommerceId    Int?    // ID from ecommerce database (nullable for bot-only customers)
  phone          String  @unique // Primary identifier
  email          String?
  
  // SendPulse information
  sendpulseId    String  // Contact ID in SendPulse CRM
  firstName      String
  lastName       String
  
  // Sync information
  lastSyncAt     DateTime?
  syncStatus     String @default("ACTIVE") // ACTIVE, INACTIVE, ERROR

  @@map("customer_mappings")
  @@index([phone])
  @@index([email])
  @@index([sendpulseId])
}

// Sync Jobs Table - tracks synchronization jobs
model SyncJob {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startedAt   DateTime?
  completedAt DateTime?

  // Job information
  jobType     String   // product_sync, order_sync, customer_sync
  status      String   @default("PENDING") // PENDING, RUNNING, COMPLETED, ERROR
  
  // Results
  itemsProcessed Int @default(0)
  itemsSuccess   Int @default(0)
  itemsError     Int @default(0)
  
  // Error information
  errorMessage String?
  errorDetails String? // JSON string of detailed errors
  
  // Configuration
  config       String @default("{}") // JSON string of job configuration

  @@map("sync_jobs")
  @@index([jobType])
  @@index([status])
  @@index([createdAt])
}

// Webhook Events Table - logs incoming webhooks
model WebhookEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Webhook information
  source    String   // sendpulse, telegram, whatsapp, etc.
  eventType String   // order_update, contact_update, etc.
  eventId   String?  // External event ID if available
  
  // Request details
  headers   String   // JSON string of headers
  payload   String   // JSON string of payload
  
  // Processing status
  processed    Boolean @default(false)
  processedAt  DateTime?
  errorMessage String?

  @@map("webhook_events")
  @@index([source])
  @@index([eventType])
  @@index([processed])
  @@index([createdAt])
}

// API Logs Table - logs important API calls for debugging
model ApiLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Request information
  method     String
  endpoint   String
  statusCode Int
  
  // User information
  userType   String?  // api_key, jwt, anonymous
  userId     String?
  userAgent  String?
  ipAddress  String?
  
  // Timing
  responseTime Int?    // Response time in milliseconds
  
  // Additional context
  context      String @default("{}") // JSON string for additional context
  errorMessage String?

  @@map("api_logs")
  @@index([endpoint])
  @@index([statusCode])
  @@index([userType])
  @@index([createdAt])
}